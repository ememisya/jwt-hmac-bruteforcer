package edu.vt.ememisya.bruteforce.jwt;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

/**
 * Implementation for HS256 tokens.
 *
 * @author Erdem Memisyazici
 */
public class HS256BruteforceAlgorithm extends AbstractBruteforceAlgorithm {

    //JCA algorithm name for HMAC-SHA-256
    private static final String HS256ALG = "HmacSHA256";

    //JWT algorithm name for HMAC-SHA-256
    private static final String HS256 = "HS256";

    @Override
    public String getTokenAlgorithm() {
        return HS256;
    }

    /**
     * {@inheritDoc}
     *
     * Using the following JWT formula: HMACSHA256( base64UrlEncodedHeader + "."
     * + base64UrlEncodedPayload, secret )
     *
     * @param secret Secret to check
     * @param jwtHeader B64 JWT header
     * @param jwtPayload B64 JWT payload
     * @return Compare jwtSignature to the one generated by secret, true if
     * matches false otherwise.
     */
    @Override
    public byte[] signToken(
            final byte[] secret,
            final byte[] jwtHeader,
            final byte[] jwtPayload) {
        final Mac sha256_HMAC;
        try {
            sha256_HMAC = initSpec(secret);
        } catch (InvalidKeyException | NoSuchAlgorithmException ex) {
            throw new IllegalStateException(ex);
        }
        final byte[] c = TokenBruteforceAlgorithm.prepareSignatureData(
                jwtHeader, jwtPayload);
        return sha256_HMAC.doFinal(c);
    }

    /**
     * Initializes HMAC-SHA-256 {@link Mac} with a given secret.
     *
     * @param secret Secret to initialize with.
     * @return {@link Mac} instance.
     *
     * @throws InvalidKeyException
     * @throws NoSuchAlgorithmException
     */
    private static Mac initSpec(final byte[] secret)
            throws InvalidKeyException, NoSuchAlgorithmException {
        final Mac hmacSha256 = Mac.getInstance(HS256ALG);
        final SecretKeySpec secretKey
                = new SecretKeySpec(secret, HS256ALG);
        hmacSha256.init(secretKey);
        return hmacSha256;
    }

}
